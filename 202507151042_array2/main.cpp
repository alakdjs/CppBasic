#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>

using namespace std;

class Monster {
private:
	string _name;
	int _health;
	int _attack;
	int _defense;

public:
	Monster() {
		cout << "Monter 기본생성자" << endl;
		_name = "";
		_health = 0;
		_attack = 0;
		_defense = 0;
	}

	Monster(string name, int health, int attack, int defense)
		: _name(name), _health(health), _attack(attack), _defense(defense)
	{
		cout << _name << "Monster 인자를 받는 생성자" << endl;
	}

	~Monster() {
		cout << _name << "소멸자" << endl;
	}

	void Init(string name, int health, int attack, int defense) {
		_name = name;
		_health = health;
		_attack = attack;
		_defense = defense;
	}

	void Attack() {
		cout << _name << "이 공격한다." << endl;
	}

	void Defense() {
		cout << _name << "이 방어한다." << endl;
	}

	void Info() {
		cout << "몬스터명: " << _name << endl;
		cout << "생명력: " << _health << endl;
		cout << "공격력: " << _attack << endl;
		cout << "방어력: " << _defense << endl << endl;
	}
};

// 객체 배열
int main() {
	// 동적 배열 생성
	int count = 0;
	char buff[30];

	cout << "만들 몬스터의 마리수를 입력하세요: ";
	cin >> count;

	Monster** ppMonsterArray = new Monster* [count];

	for (int i = 0; i < count; i++) {
		sprintf(buff, "DynamicArray_%d", i);
		ppMonsterArray[i] = new Monster(buff, i * 10, i * 3, i * 2);
		// 인자를 받는 생성자를 호출하여 동적 객체 생성
	}

	cout << "몬스터들 Attack" << endl;
	for (int i = 0; i < count; i++) {
		ppMonsterArray[i]->Info();
	}

	// 각각의 동적객체 반납처리
	for (int i = 0; i < count; i++) {
		delete ppMonsterArray[i];
	}

	delete[] ppMonsterArray; // 동적배열 반납처리

	return 0;
}